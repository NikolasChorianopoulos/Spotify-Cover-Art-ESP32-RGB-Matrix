#include <ESP32-HUB75-MatrixPanel-I2S-DMA.h>
#include "FS.h"
#include <LittleFS.h>
#include "SPIFFS.h"
#include <SD.h>
#include <WiFi.h>
#include <WebServer.h>

const char* ssid = "Crazy Science Duck";
const char* password = "6986821238";

void wiifisetup() {
// Connect to Wi-Fi
    WiFi.begin(ssid, password);
    Serial.print("Connecting to WiFi");
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println();
    Serial.print("Connected! IP Address: ");
    Serial.println(WiFi.localIP());
}

// Create a WebServer object on port 80
WebServer server(80);

// Variable to store the input value
String inputValue = "";
String previousInputValue = "";

// Variables to store RGB values
int redValue = 0;
int greenValue = 0;
int blueValue = 0;

// Variables to store X and Y coordinates
int xValue = 1;
int yValue = 1;

const char* htmlPage = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
    <title>ESP32 Input</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .container {
            padding: 10px;
        }
        .color-picker {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
            width: 100%;
        }
        .color-preview {
            width: 80px;
            height: 80px;
            border: 1px solid #000;
            margin: 10px 0;
        }
        .color-label {
            display: flex;
            align-items: center;
            gap: 10px;
            width: 100%;
        }
        .color-label label {
            font-weight: bold;
            flex: 1;
        }
        input[type="range"] {
            flex: 2;
        }
        .grid-container {
            width: 100%;
            max-width: 320px;
            aspect-ratio: 1;
            background-color: #f0f0f0;
            border: 1px solid #000;
            display: grid;
            grid-template-columns: repeat(64, 1fr);
            grid-template-rows: repeat(64, 1fr);
            margin: 10px auto;
        }
        .grid-point {
            width: 100%;
            height: 100%;
        }
        .highlight {
            background-color: red;
        }
        input[type="submit"] {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        input[type="submit"]:hover {
            background-color: #45a049;
        }
        @media (max-width: 600px) {
            .color-picker {
                gap: 5px;
            }
            .color-preview {
                width: 60px;
                height: 60px;
            }
            input[type="submit"] {
                font-size: 14px;
                padding: 8px;
            }
        }
    </style>
    <script>
        function updateColorPreview() {
            const red = document.getElementById('red').value || 0;
            const green = document.getElementById('green').value || 0;
            const blue = document.getElementById('blue').value || 0;
            const preview = document.getElementById('color-preview');
            preview.style.backgroundColor = `rgb(${red}, ${green}, ${blue})`;
        }
        function updateCoordinates() {
            const x = document.getElementById('x').value || 0;
            const y = document.getElementById('y').value || 0;
            document.getElementById('x-value').innerText = x;
            document.getElementById('y-value').innerText = y;

            const grid = document.getElementById('grid');
            Array.from(grid.children).forEach(child => child.classList.remove('highlight'));
            const index = (y * 64) + parseInt(x);
            grid.children[index].classList.add('highlight');
        }
        function createGrid() {
            const grid = document.getElementById('grid');
            for (let i = 0; i < 64 * 64; i++) {
                const div = document.createElement('div');
                div.classList.add('grid-point');
                grid.appendChild(div);
            }
        }
        window.onload = createGrid;
    </script>
</head>
<body>
    <div class="container">
        <h1>Matrix Controller</h1>
        <form action="/submit" method="GET">
            <h2>Enter text</h2>
            <label for="value"></label>
            <input type="text" id="value" name="value" style="width: 100%;">
            <div class="color-picker">
                <h2>Choose a Colour</h2>
                <div class="color-label">
                    <label for="red">Red:</label>
                    <input type="range" id="red" name="red" min="0" max="255" value="0" oninput="updateColorPreview()">
                </div>
                <div class="color-label">
                    <label for="green">Green:</label>
                    <input type="range" id="green" name="green" min="0" max="255" value="0" oninput="updateColorPreview()">
                </div>
                <div class="color-label">
                    <label for="blue">Blue:</label>
                    <input type="range" id="blue" name="blue" min="0" max="255" value="0" oninput="updateColorPreview()">
                </div>
                <div id="color-preview" class="color-preview"></div>
            </div>
            <div class="color-picker">
                <h2>Set Position</h2>
                <div class="color-label">
                    <label for="x">X:</label>
                    <input type="range" id="x" name="x" min="0" max="64" value="1" oninput="updateCoordinates()">
                    <span id="x-value">1</span>
                </div>
                <div class="color-label">
                    <label for="y">Y:</label>
                    <input type="range" id="y" name="y" min="0" max="64" value="1" oninput="updateCoordinates()">
                    <span id="y-value">1</span>
                </div>
            </div>
            <div class="grid-container" id="grid"></div>
            <input type="submit" value="Submit">
        </form>
    </div>
</body>
</html>
)rawliteral";



const int panelResX = 64;   
const int panelResY = 64;   
const int panel_chain = 1;  

// Matrix display
MatrixPanel_I2S_DMA *dma_display = nullptr;

void displaySetup() {
  HUB75_I2S_CFG mxconfig(
    panelResX,   // Martix width
    panelResY,   // Matrix height
    panel_chain  // Chain length
  );
  
  mxconfig.gpio.e = 32;  
  mxconfig.clkphase = false;
  

  dma_display = new MatrixPanel_I2S_DMA(mxconfig);
  dma_display->begin();
  

}

void displayText() {
      // Rotate diaplay (0, 1, 2, 3)
    dma_display->setRotation(2);

    // Clear screen
    dma_display->fillScreen(dma_display->color565(0, 0, 0));

    dma_display->setTextSize(1);      // size 1 == 8 pixels high
    dma_display->setTextWrap(true);  // Don't wrap at end of line - will do ourselves
    dma_display->setTextColor(dma_display->color565(redValue, greenValue, blueValue));

    dma_display->setCursor(xValue, yValue);  // Start at top left, with 8 pixel of spacing
    dma_display->print(inputValue);    

}

void handleRoot() {
    // Replace the placeholders with the current values
    String html = htmlPage;
    html.replace("%CURRENT_VALUE%", inputValue);
    html.replace("%RED_VALUE%", String(redValue));
    html.replace("%GREEN_VALUE%", String(greenValue));
    html.replace("%BLUE_VALUE%", String(blueValue));
    server.send(200, "text/html", html);
}

void handleSubmit() {
    // Check if the "value" parameter exists
    if (server.hasArg("value")) {
        inputValue = server.arg("value");
    }
    // Check if the RGB parameters exist
    if (server.hasArg("red")) {
        redValue = server.arg("red").toInt();
    }
    if (server.hasArg("green")) {
        greenValue = server.arg("green").toInt();
    }
    if (server.hasArg("blue")) {
        blueValue = server.arg("blue").toInt();
    }

    // Check if the X and Y parameters exist
    if (server.hasArg("x")) {
        xValue = server.arg("x").toInt();
    }
    if (server.hasArg("y")) {
        yValue = server.arg("y").toInt();
    }

    displayText();
    
    // Redirect back to the main page
    server.sendHeader("Location", "/");
    server.send(303);
}


void setup(){
   
    Serial.begin(115200);

    wiifisetup();

    // Define server routes
    server.on("/", handleRoot);
    server.on("/submit", handleSubmit);

    // Start the server
    server.begin();
    Serial.println("Web server started!");


    displaySetup();

    dma_display->setRotation(2);
    dma_display->setTextSize(1); 
    dma_display->setTextColor(dma_display->color565(255, 0, 0));
    dma_display->setCursor(1, 1);
    dma_display->print("Web Server On:");
    dma_display->setCursor(1, 30);
    dma_display->print(WiFi.localIP());
    

}

void loop(){
  // Handle client requests
    server.handleClient();   
    
   
}