#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include "FS.h"
#include <LittleFS.h>
#include <Wire.h>
#include <SPI.h>
#include "SPIFFS.h"
#include <SD.h>

// WiFi credentials
const char* ssid = "Nick";
const char* password = "12345678";

// Spotify credentials
const char* client_id = "e57a0662b41a486ea2cdcfe94f457876";
const char* client_secret = "c8feb5189c2747eaa1327d74c8a9bf2c";
String refresh_token = "AQCBcHxTke_q-vYyvjTtu3Wwsu2hlr9GMvK1ueyqtnrLPnYXxBGAn3iIP6_4779ws65y_ehRtB_yjBaRiN4P3G27TizdD-4lHRKNY2y2HZQm6FZejR67RXPVc4blSxpc6zg"; // Obtain this from initial authorization
String access_token;

// Spotify API URLs
const char* token_url = "https://accounts.spotify.com/api/token";
const char* currently_playing_url = "https://api.spotify.com/v1/me/player/currently-playing";

// Function to connect to WiFi
void connectToWiFi() {
    Serial.print("Connecting to WiFi");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi");
}

// Function to refresh Spotify access token
void refreshAccessToken() {
    Serial.println("Refreshing access token...");
    HTTPClient http;
    http.begin(token_url);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");

    String requestBody = "grant_type=refresh_token&refresh_token=" + refresh_token +
                         "&client_id=" + client_id + "&client_secret=" + client_secret;

    int httpResponseCode = http.POST(requestBody);
    if (httpResponseCode == 200) {
        String response = http.getString();
        Serial.println("Access token refreshed");

        // Parse JSON to extract the new access token
        DynamicJsonDocument doc(1024);
        deserializeJson(doc, response);
        access_token = doc["access_token"].as<String>();
    } else {
        Serial.println("Failed to refresh token. HTTP code: " + String(httpResponseCode));
    }
    http.end();
}

// Function to get currently playing song's cover art
// Add a global variable to track the last imageUrl
String lastImageUrl = "";

void getCurrentlyPlaying() {
   
    HTTPClient http;
    http.begin(currently_playing_url);
    http.addHeader("Authorization", "Bearer " + access_token);

    int httpResponseCode = http.GET();
    if (httpResponseCode == 200) {
        String response = http.getString();

        // Parse the JSON response
        DynamicJsonDocument doc(16384); // Increased buffer size
        DeserializationError error = deserializeJson(doc, response);
        if (error) {
            Serial.print("JSON Deserialization failed: ");
            Serial.println(error.f_str());
            return;
        }

        // Extract the URL of the smallest album cover
        const char* imageUrl = doc["item"]["album"]["images"][2]["url"]; // Change the index if you want a larger image
        if (imageUrl) {
            String currentImageUrl = String(imageUrl);
            if (currentImageUrl != lastImageUrl) {
                lastImageUrl = currentImageUrl; // Update the last imageUrl
                Serial.println("Album Cover URL: " + currentImageUrl);
            }
            // No action needed if URL hasn't changed
        } else {
            Serial.println("Image URL not found in the response.");
        }
    } else if (httpResponseCode == 401) {
        Serial.println("Access token expired. Refreshing token...");
        refreshAccessToken(); // Token expired, refresh it
    } else {
        Serial.println("Failed to get currently playing song. HTTP code: " + String(httpResponseCode));
    }
    http.end();
}



void setup() {
    Serial.begin(115200);
    connectToWiFi();

    // Refresh the token initially
    refreshAccessToken();
}

void loop() {
    getCurrentlyPlaying();
    delay(3000); // Poll every 30 seconds
}
